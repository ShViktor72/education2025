// XMLHttpRequest
let xhr = new XMLHttpRequest();  // 1. –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç

xhr.open("GET", "https://jsonplaceholder.typicode.com/posts/1");  
// 2. –ì–æ–≤–æ—Ä–∏–º: —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å "GET" –ø–æ –∞–¥—Ä–µ—Å—É (URL)

xhr.send();  
// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å

xhr.onload = function() {        // 4. –ñ–¥—ë–º, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç
  if (xhr.status === 200) {      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ
    console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", xhr.responseText);
  } else {
    console.error("–û—à–∏–±–∫–∞:", xhr.status);
  }
};


// fetch
fetch("https://jsonplaceholder.typicode.com/posts/1")
  .then(response => response.json()) // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
  .then(data => console.log("–î–∞–Ω–Ω—ã–µ:", data))
  .catch(error => console.error("–û—à–∏–±–∫–∞:", error));



async function getPost() {
  try {
    let response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
    let data = await response.json();
    console.log("–î–∞–Ω–Ω—ã–µ:", data);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
  }
}

getPost();

// POST
fetch("https://jsonplaceholder.typicode.com/posts", {
  method: "POST", // –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  headers: {
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    title: "–ü—Ä–∏–º–µ—Ä",
    body: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
    userId: 1
  })
})
  .then(response => response.json())
  .then(data => console.log("–°–æ–∑–¥–∞–Ω–æ:", data));
  
// üëâ –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏:
fetch("https://jsonplaceholder.typicode.com/unknown")
  .then(response => {
    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ HTTP: " + response.status);
    }
    return response.json();
  })
  .then(data => console.log(data))
  .catch(err => console.error(err));
  
// fetch –∏ –ø—Ä–æ–º–∏—Å—ã
let promise = fetch("https://jsonplaceholder.typicode.com/posts/1");
console.log(promise); // Promise { <pending> }


fetch("https://jsonplaceholder.typicode.com/posts/1")
  .then(response => {
    console.log("–°—Ç–∞—Ç—É—Å:", response.status); // 200
    return response.json(); // –ø–∞—Ä—Å–∏–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –≤ JSON
  })
  .then(data => {
    console.log("–î–∞–Ω–Ω—ã–µ:", data); // –æ–±—ä–µ–∫—Ç —Å –ø–æ—Å—Ç–æ–º
  });
  
// catch
fetch("https://jsonplaceholder.typicode.com/unknown") // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
  .then(response => {
    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ HTTP: " + response.status);
    }
    return response.json();
  })
  .then(data => console.log(data))
  .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error.message));
  
// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
fetch("https://jsonplaceholder.typicode.com/posts/1")
  .then(res => res.json())
  .then(post => {
    console.log("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞:", post.title);
    return fetch("https://jsonplaceholder.typicode.com/users/" + post.userId);
  })
  .then(res => res.json())
  .then(user => console.log("–ê–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞:", user.name))
  .catch(err => console.error("–û—à–∏–±–∫–∞:", err));
  
// async/await –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
async function getPost() {
  try {
    let response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
    let data = await response.json(); // –∂–¥—ë–º, –ø–æ–∫–∞ –æ—Ç–≤–µ—Ç –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ JSON
    console.log("–ü–æ—Å—Ç:", data);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", error);
  }
}

getPost();


// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
async function getData() {
  try {
    let response = await fetch("https://jsonplaceholder.typicode.com/unknown");

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ HTTP: " + response.status);
    }

    let data = await response.json();
    console.log("–î–∞–Ω–Ω—ã–µ:", data);

  } catch (error) {
    console.error("–ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:", error.message);
  }
}

getData();

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

async function getPostAndUser() {
  try {
    let postRes = await fetch("https://jsonplaceholder.typicode.com/posts/1");
    let post = await postRes.json();

    let userRes = await fetch("https://jsonplaceholder.typicode.com/users/" + post.userId);
    let user = await userRes.json();

    console.log("–ü–æ—Å—Ç:", post.title);
    console.log("–ê–≤—Ç–æ—Ä:", user.name);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞:", e);
  }
}

getPostAndUser();

// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
async function getParallel() {
  try {
    let [postsRes, usersRes] = await Promise.all([
      fetch("https://jsonplaceholder.typicode.com/posts"),
      fetch("https://jsonplaceholder.typicode.com/users")
    ]);

    let posts = await postsRes.json();
    let users = await usersRes.json();

    console.log("–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:", posts.length);
    console.log("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", users.length);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞:", e);
  }
}

getParallel();

// –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
async function networkErrorDemo() {
  try {
    let response = await fetch("https://wrong-domain.example.com/data");
    let data = await response.json();
    console.log(data);
  } catch (err) {
    console.error("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:", err.message);
  }
}
networkErrorDemo();

// –û—à–∏–±–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
async function statusErrorDemo() {
  let response = await fetch("https://jsonplaceholder.typicode.com/unknown");

  if (!response.ok) {
    console.error("–û—à–∏–±–∫–∞ HTTP:", response.status); // 404
    return;
  }

  let data = await response.json();
  console.log(data);
}

statusErrorDemo();

// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
async function safeFetch() {
  try {
    let response = await fetch("https://jsonplaceholder.typicode.com/unknown");

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ HTTP: " + response.status);
    }

    let data = await response.json();
    console.log("–î–∞–Ω–Ω—ã–µ:", data);

  } catch (error) {
    console.error("–ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:", error.message);
  }
}

safeFetch();

// –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ API
// –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç ‚Äî ExchangeRate API
async function getRates() {
  let res = await fetch("https://open.er-api.com/v6/latest/USD");
  let data = await res.json();
  console.log("–ö—É—Ä—Å USD –∫ EUR:", data.rates.EUR);
  console.log("–ö—É—Ä—Å USD –∫ JPY:", data.rates.JPY);
}

getRates();

//–°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ ‚Äî Quotable API
async function getQuote() {
  let res = await fetch("https://api.quotable.io/random");
  let data = await res.json();
  console.log(`"${data.content}" ‚Äî ${data.author}`);
}

getQuote();

// –î–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–µ ‚Äî REST Countries API
async function getCountry() {
  let res = await fetch("https://restcountries.com/v3.1/name/france");
  let data = await res.json();
  console.log("–°—Ç—Ä–∞–Ω–∞:", data[0].name.common);
  console.log("–°—Ç–æ–ª–∏—Ü–∞:", data[0].capital[0]);
  console.log("–†–µ–≥–∏–æ–Ω:", data[0].region);
}

getCountry();

// –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî Random User Generator
async function getUser() {
  let res = await fetch("https://randomuser.me/api/");
  let data = await res.json();
  let user = data.results[0];
  console.log("–ò–º—è:", user.name.first, user.name.last);
  console.log("Email:", user.email);
  console.log("–°—Ç—Ä–∞–Ω–∞:", user.location.country);
}

getUser();

//–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ—Ç–∞  ‚Äî The Cat API
async function getCat() {
  let res = await fetch("https://api.thecatapi.com/v1/images/search");
  let data = await res.json();
  console.log("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ—Ç–∞:", data[0].url);
}

getCat();