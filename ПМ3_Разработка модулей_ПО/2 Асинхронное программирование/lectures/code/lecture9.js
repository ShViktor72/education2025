// –î—Ä–µ–π—Ñ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ 
let count = 0;
const startTime = Date.now();
const myInterval = setInterval(() => {
    count++;
    const actualTime = Date.now() - startTime;
    const expectedTime = count * 1000;
    const drift = actualTime - expectedTime;
    
    console.log(`–ü—Ä–æ—à–ª–æ: ${actualTime} –º—Å. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedTime} –º—Å. –î—Ä–µ–π—Ñ: ${drift} –º—Å.`);
}, 1000);

function blockMainThread() {
    const start = Date.now();
    // –≠—Ç–æ—Ç —Ü–∏–∫–ª –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 3 —Å–µ–∫—É–Ω–¥—ã
    while (Date.now() - start < 3000) {
        // –ü—Ä–æ—Å—Ç–æ –∂–¥—ë–º –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –Ω–æ –ø–æ—Ç–æ–∫ –∑–∞–Ω—è—Ç
    }
}

setTimeout(blockMainThread, 2000);

// —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä
let count = 0;
const startTime = Date.now();
const interval = 1000; // –ù–∞—à –∂–µ–ª–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ 1000 –º—Å

function scheduleNextCall() {
    count++;
    const actualTime = Date.now() - startTime; // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞
    const expectedTime = count * interval;     // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–π—Ç–∏
    const drift = actualTime - expectedTime;   // –í—ã—á–∏—Å–ª—è–µ–º –¥—Ä–µ–π—Ñ
    console.log(`–ü—Ä–æ—à–ª–æ: ${actualTime} –º—Å. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedTime} –º—Å. –î—Ä–µ–π—Ñ: ${drift} –º—Å.`);
    
    // –í—ã—á–∏—Å–ª—è–µ–º, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤
    // –ï—Å–ª–∏ –¥—Ä–µ–π—Ñ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, —É–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    // –ï—Å–ª–∏ –¥—Ä–µ–π—Ñ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –±—É–¥–µ—Ç 0, –∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–µ—Ç—Å—è —Å—Ä–∞–∑—É
    const nextCallIn = interval - drift;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º Math.max(0, nextCallIn), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç—Ä. –∑–Ω–∞—á–µ–Ω–∏–π
    setTimeout(scheduleNextCall, Math.max(0, nextCallIn));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ü–µ–ø–æ—á–∫—É
setTimeout(scheduleNextCall, interval);

// –ò–º–∏—Ç–∞—Ü–∏—è "—Ç—è–∂—ë–ª–æ–π" —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –¥—Ä–µ–π—Ñ
function blockMainThread() {
    const start = Date.now();
    while (Date.now() - start < 3000) {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
setTimeout(blockMainThread, 2000);

// –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
// –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç

// <p id="timer"></p>

let count = 10;
const timerEl = document.getElementById("timer");

const intervalId = setInterval(() => {
    timerEl.textContent = count;
    if (count === 0) {
        clearInterval(intervalId);
        timerEl.textContent = "üöÄ –°—Ç–∞—Ä—Ç!";
    }
    count--;
}, 1000);

// –ß–∞—Å—ã
// <p id="clock"></p>

function updateClock() {
    document.getElementById("clock")
        .textContent = new Date()
        .toLocaleTimeString();
}

updateClock(); // —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å
setInterval(updateClock, 1000);


// —Å–≤–µ—Ç–æ—Ñ–æ—Ä
// <div id="light" style="width:100px; height:100px; border-radius:50%; background:red;"></div>

const light = document.getElementById("light");
const colors = ["red", "yellow", "green"];
let i = 0;

function changeColor() {
    light.style.background = colors[i];
    i = (i + 1) % colors.length;
    setTimeout(changeColor, i === 1 ? 500 : 2000);
    // –∂—ë–ª—Ç—ã–π - 0.5 —Å–µ–∫, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - 2 —Å–µ–∫
}

changeColor();
